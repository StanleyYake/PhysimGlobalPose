#! /usr/bin/env python
import sys, os

# Verify if path is set in bashrc
if os.environ.get('PHYSIM_GLOBAL_POSE') == None:
    print("Please set PHYSIM_GLOBAL_POSE in bashrc!")
    sys.exit()

g_repo_path = os.environ['PHYSIM_GLOBAL_POSE']

sys.path.append(g_repo_path + "/src")

import detection_package._init_paths
from fast_rcnn.config import cfg
import caffe, cv2
import rospy
from detection_package.srv import *
import detection_package.recognition
import numpy as np

active_object_list = []
active_frame = ''

apc_objects_strs = [
 "crayola_24_ct", "expo_dry_erase_board_eraser", "folgers_classic_roast_coffee",
  "scotch_duct_tape", "dasani_water_bottle", "jane_eyre_dvd",
  "up_glucose_bottle", "laugh_out_loud_joke_book", "soft_white_lightbulb",
  "kleenex_tissue_box", "ticonderoga_12_pencils", "dove_beauty_bar",
  "dr_browns_bottle_brush", "elmers_washable_no_run_school_glue", "rawlings_baseball",
  "command_hooks", "kyjen_squeakin_eggs_plush_puppies", "platinum_pets_dog_bowl", "cherokee_easy_tee_shirt"
];

class detection:
  def __init__(self, prototxt, caffemodel):
    caffe.set_mode_gpu()
    caffe.set_device(0)
    self.net = caffe.Net(prototxt, caffemodel, caffe.TEST)

  def handle_update_bbox(self, req):
    global active_object_list
    global active_frame

    cv_image = cv2.imread(req.scene_path + 'frame-000000.color.png', cv2.IMREAD_COLOR)
    print(active_object_list)
    print(active_frame)
    print(req.scene_path + 'frame-000000.color.png')

    bboxlist,scorelist = detection_package.recognition.detect(self.net, cv_image, active_object_list)
    blist = np.array(bboxlist)
    slist = np.array(scorelist)

    directory = req.scene_path + '/debug'
    if not os.path.exists(directory):
        os.makedirs(directory)

    height,width,depth = cv_image.shape

    if len(bboxlist) > 0:
        tl_x = blist[:,0]
        tl_y = blist[:,1]
        br_x = blist[:,2]
        br_y = blist[:,3]
        for i in range(0,len(active_object_list)):
            mask_img = np.zeros((height,width), np.uint8)
            mask_img[int(tl_y[i]):int(br_y[i]),int(tl_x[i]):int(br_x[i])] = 1
            bbox_img = cv_image.copy()
            cv2.rectangle(bbox_img,(int(tl_x[i]),int(tl_y[i])),(int(br_x[i]),int(br_y[i])),255,1)
            cv2.imwrite(directory + '/frame-' + active_frame + '.' + apc_objects_strs[active_object_list[i]-1] + '.bbox.png',bbox_img)
            cv2.imwrite(directory + '/frame-' + active_frame + '.' + apc_objects_strs[active_object_list[i]-1] + '.mask.png',mask_img)
            file = open(directory + '/frame-' + active_frame + '.' + apc_objects_strs[active_object_list[i]-1] + '.score.txt','w')
            file.write("%f" % (slist[i]))
            file.close()
        return np.int64(active_object_list), tl_x, tl_y, br_x, br_y, slist 
    else:
        return np.int64([]), np.int64([]), np.int64([]), np.int64([]), np.int64([]), np.int64([])

def update_active_object_list_and_frame(req):
    global active_object_list
    global active_frame
    active_object_list = req.active_list
    active_frame = req.active_frame
    return 1

if __name__ == '__main__':
    cfg.TEST.HAS_RPN = True  # Use RPN for proposals

    args = detection_package.recognition.parse_args()

    global caffemodel, prototxt

    caffemodel = os.path.join(cfg.DATA_DIR, 'faster_rcnn_models',
                               'vgg_cnn_m_1024_faster_rcnn_iter_10000seed_3.caffemodel')
       
    prototxt = os.path.join(cfg.DATA_DIR, 'faster_rcnn_models',
                      'test.prototxt')
        
    if not os.path.isfile(caffemodel):
        raise IOError(('{:s} not found.').format(caffemodel))
    if not os.path.isfile(prototxt):
        raise IOError(('{:s} not found.').format(prototxt))

    det = detection(prototxt, caffemodel)
    print '\n\nLoaded network {:s}'.format(caffemodel)

    ## Listen to the image topic and detect objects
    rospy.init_node('detector', anonymous=True)
    
    s1 = rospy.Service('update_bbox', UpdateBbox, det.handle_update_bbox)
    s2 = rospy.Service('update_active_list_and_frame', UpdateActiveListFrame, update_active_object_list_and_frame)
    rospy.spin()